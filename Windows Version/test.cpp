#include <iostream>

#define NONCE_SIZE 6
#define HASH_SIZE 10

struct Record
{
    uint8_t hash[HASH_SIZE];
    uint8_t nonce[NONCE_SIZE];
};

int main()
{
    Record* record = new Record[5];
    record[0] = {{0x9f,0xc3,0x7c,0x30,0x34,0x07,0x06,0x09,0x08,0x07},{0x9f,0xc3,0x7c,0x30,0x34,0x07}};
    record[1] = {{0x9f,0xc3,0x7c,0x30,0x34,0x07,0x09,0x09,0x09,0x09},{0x9f,0xc3,0x7c,0x30,0x34,0x07}};
    record[2] = {{0x9f,0xc3,0x7c,0x30,0x34,0x07,0x06,0x08,0x04,0x04},{0x9f,0xc3,0x7c,0x30,0x34,0x07}};
    record[3] = {{0x9f,0xc3,0x7c,0x30,0x34,0x07,0x06,0x07,0x08,0x09},{0x9f,0xc3,0x7c,0x30,0x34,0x07}};
    record[4] = {{0x9f,0xc3,0x7c,0x30,0x34,0x07,0x06,0x07,0x08,0x09},{0x9f,0xc3,0x7c,0x30,0x34,0x07}};

    for(int i=0; i<2; i++)
    {
        printf("hash: ");
        for(int j=0; j<HASH_SIZE; j++)
        {
            printf("%02x", record[i].hash[j]);
        }
        printf(", nonce: ");
        for(int j=0; j<NONCE_SIZE; j++)
        {
            printf("%02x", record[i].nonce[j]);
        }
        printf("\n");
    }

    record[1] = record[0];

    for(int i=0; i<2; i++)
    {
        printf("hash: ");
        for(int j=0; j<HASH_SIZE; j++)
        {
            printf("%02x", record[i].hash[j]);
        }
        printf(", nonce: ");
        for(int j=0; j<NONCE_SIZE; j++)
        {
            printf("%02x", record[i].nonce[j]);
        }
        printf("\n");
    }
}
